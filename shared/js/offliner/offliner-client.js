!function(exports){"use strict";var nextPromiseId=1,originalOff=exports.off,root=function(){var root=new URL(document.currentScript.dataset.root||"",window.location.origin).href;return root.endsWith("/")?root:root+"/"}(),workerURL=root+(document.currentScript.dataset.worker||"offliner-worker.js");exports.off={_eventListeners:{},_xpromises:{},restore:function(){return exports.off=originalOff,this},install:function(){return this._installMessageHandlers(),navigator.serviceWorker.register(workerURL,{scope:root})},on:function(type,handler,willBeThis){this._has(type,handler,willBeThis)||(this._eventListeners[type]=this._eventListeners[type]||[],this._eventListeners[type].push([handler,willBeThis]))},update:function(){return this._crossPromise("update")},activate:function(){return this._crossPromise("activate")},_runListeners:function(type,evt){var listeners=this._eventListeners[type]||[];listeners.forEach(function(listenerAndThis){var listener=listenerAndThis[0],willBeThis=listenerAndThis[1];listener.call(willBeThis,evt)})},_installMessageHandlers:function installMessageHandlers(){function onmessage(e){var msg=e.data,type=msg?msg.type:"",typeAndSubType=type.split(":");"offliner"===typeAndSubType[0]&&that._handleMessage(typeAndSubType[1],msg)}var that=this;if(!installMessageHandlers.done){if("function"==typeof BroadcastChannel){var bc=new BroadcastChannel("offliner-channel");bc.onmessage=onmessage}else window.addEventListener("message",onmessage);installMessageHandlers.done=!0}},_handleMessage:function(offlinerType,msg){navigator.serviceWorker;"crossPromise"===offlinerType?this._resolveCrossPromise(msg):this._runListeners(offlinerType,msg)},_has:function(type,handler,willBeThis){for(var listenerAndThis,listeners=this._eventListeners[type]||[],i=0;listenerAndThis=listeners[i];i++)if(listenerAndThis[0]===handler&&listenerAndThis[1]===willBeThis)return!0;return!1},_crossPromise:function(order){return new Promise(function(accept,reject){var uniqueId=nextPromiseId++,msg={type:"crossPromise",id:uniqueId,order:order};this._xpromises[uniqueId]=[accept,reject],this._send(msg)}.bind(this))},_send:function(msg){navigator.serviceWorker.controller.postMessage(msg)},_resolveCrossPromise:function(msg){var implementation=this._xpromises[msg.id];implementation?implementation["rejected"===msg.status?1:0](msg.value):console.warn("Trying to resolve unexistent promise:",msg.id)}}}(this);